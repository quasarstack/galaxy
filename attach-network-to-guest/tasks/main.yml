---

- name: Fetch KVM guest list
  ansible.builtin.shell: virsh list --all|egrep "\s\-|\s[0-9]"|awk '{print $2}'
  register: _guest_list

- name: List guest machines of KVM host
  ansible.builtin.debug:
    var: _guest_list.stdout_lines

# _knet.ansible_facts.ansible_libvirt_networks will store all kvm virtual networks after running this task.
- name: Get KVM Network facts
  community.libvirt.virt_net:
    command: facts
  register: _knet

- name: Check network_exists=false if network not available
  ansible.builtin.set_fact:
    network_exists: false
  with_items: "{{net_list}}"
  when: not item in _knet.ansible_facts.ansible_libvirt_networks

- name: Run asserts
  ansible.builtin.assert:
    that:
      - guest_name is defined and guest_name in _guest_list.stdout_lines
      - network_exists|bool
    fail_msg:
      - "guest_name must be defined and should be exists on KVM host"
      - "net_list must be defined and should be exists on KVM host"

- name: List interfaces of {{guest_name}} machine
  ansible.builtin.shell: virsh domiflist {{guest_name}}
  register: _iflist

- name: Set fact ifexists=true if network already attached
  ansible.builtin.set_fact:
    ifexists: true
  with_items: "{{net_list}}"
  when: _iflist.stdout is search(item)

- block:
  - ansible.builtin.debug:
      msg:
        - "One of the network from {{net_list}} already attached to {{guest_name}}"
        - "Run -> virsh domiflist {{guest_name}} to validate"
        - "Review README for information to handle this scenario"
        - "Stopping playbook"
  
  - ansible.builtin.meta: end_play
  when: ifexists is defined and ifexists|bool

- name: Shutdown {{guest_name}} guest machine
  ansible.builtin.shell: |
    while true;do
      if virsh domstate {{guest_name}}|egrep "running";then
        virsh shutdown {{guest_name}}
      fi

      if ! virsh domstate {{guest_name}}|egrep "shut off";then
        sleep 10
      else
        exit 0
      fi
    done

- name: Attach interface to {{guest_name}}
  ansible.builtin.shell: |
    virsh attach-interface --domain {{guest_name}} --config \
      --type network \
      --source {{item}} \
      --model virtio
  with_items: "{{net_list}}"

  