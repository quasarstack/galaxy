---

- ansible.builtin.debug:
    var: kvm_deployment

- name: vm-install | Run Asserts
  ansible.builtin.assert:
    that:
      - kvm_deployment.template is defined
      - kvm_deployment.virtual_machines is defined

- name: vm-install | Append kvm_deployment.virtual_machines in target_vms_list
  ansible.builtin.set_fact:
    target_vms_list: "{{target_vms_list + [item.name]}}"
  with_items: "{{kvm_deployment.virtual_machines}}"

- ansible.builtin.debug:
    msg:
      - "Selected Source Image: {{kvm_deployment.template.image}}"
      - "Ansible will create copy of the source image matching target VM name"
      - "{{target_vms_list}}"

- ansible.builtin.pause:
    echo: yes
    minutes: 15
    prompt: "\nINFO: You are processing operation on above input:\n-> Review and continue"

- block:
  - ansible.builtin.debug:
      msg:
        - "You have set cleanup=true"
        - "Existing VMs will be deleted"

  - name: vm-install | Remove VM if exists
    ansible.builtin.shell: |
        if virsh list --all |egrep {{item}};then
          if ! virsh domstate {{item}}|egrep "shut off";then
            virsh shutdown {{item}}
            sleep 10
          fi
          virsh undefine {{item}} --remove-all-storage \
            --delete-storage-volume-snapshots --snapshots-metadata
        fi
    with_items: "{{target_vms_list}}"
  when: cleanup|bool

# _guests.list_vms will store all kvm virtual machines after running this task.
- name: vm-install | List all VMs
  community.libvirt.virt:
    command: list_vms
  register: _guests

- name: vm-install | Check guest_exists=false if guest not available
  ansible.builtin.debug:
    msg: "Cloning will be skipped for {{item.name}}. It already exists"
  with_items: "{{kvm_deployment.virtual_machines}}"
  when: item.name in _guests.list_vms

#- name: vm-install | syspend {{kvm_deployment.template}}
#  ansible.builtin.command: virsh suspend {{kvm_deployment.template}}

- name: vm-install | Include virt-install.yml
  ansible.builtin.include_tasks: virt-install.yml
  with_items: "{{kvm_deployment.virtual_machines}}"
  loop_control:
    loop_var: guest
  when: guest.name not in _guests.list_vms

#- name: vm-install | resume {{kvm_deployment.template}}
#  ansible.builtin.command: virsh resume {{kvm_deployment.template}}
